{"version":3,"sources":["styles/base/_settings.scss","styles/styles.scss","utils/api.js","utils/date.js","components/Header.js","components/ProgressBar.js","components/DailyForecast.js","components/FiveDayForecast.js","components/WeatherApp.js","serviceWorker.js","index.js"],"names":["module","exports","API_KEY","axios","get","unixTime","Date","getUTCDay","timeNow","hours","getUTCHours","toString","padStart","minutes","getUTCMinutes","Header","props","className","location","from","opacity","to","reset","animate","config","duration","styleProps","style","time","temperature","ProgressBar","startTimer","timerId","setInterval","state","timer","resetTimer","handleTimerFinished","setState","prevState","clearInterval","initialTime","this","prevProps","percentageWidth","width","Component","DailyForecast","DateUtils","day","Math","floor","src","iconCode","alt","forecast","FiveDayForecast","data","length","items","keys","item","dt","enter","trail","styleProp","main","temp","weather","icon","description","WeatherApp","getWeatherData","API","then","res","currentTemperature","forecastData","filterForecastData","list","setLatestFetchData","saveWeatherDataToState","catch","err","console","log","getLatestFetchData","e","currentTime","loading","forecastDataJSON","JSON","stringify","currentTemperatureJSON","localStorage","setItem","parse","getItem","undefined","filteredData","filter","dataObject","getUTCDate","shift","push","handleTimerFinish","currentLocation","size","color","Colors","tan","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3c2c2681.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tan\":\"#9e7227\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tan\":\"#9e7227\"};","import axios from 'axios';\nconst API_KEY = '6c8ca7a74ad9d3301728396fc82b6227';\n\nexport default { \n  fetchCurrentWeather: () => (\n    axios.get(`http://api.openweathermap.org/data/2.5/weather?q=london,uk&APPID=${API_KEY}&units=metric`)\n  ),\n  fetchFiveDayForecast: () => (\n    axios.get(`http://api.openweathermap.org/data/2.5/forecast?q=london,uk&APPID=${API_KEY}&units=metric`)\n  )\n}","export default {\n  getDayOfWeek: (unixTime) => {\n    const days = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n    const date = new Date(unixTime * 1000); // multiple by 1000 to get milliseconds\n    return days[date.getUTCDay()];\n  },\n  getCurrentTime:() => {\n    const timeNow = new Date();\n    const hours = timeNow.getUTCHours().toString().padStart(2, 0);\n    const minutes = timeNow.getUTCMinutes().toString().padStart(2, 0);\n    return `${hours}:${minutes} GMT`;\n  }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Spring } from 'react-spring/renderprops';\n\nconst Header = (props) => (\n  <div className=\"header\">\n    <span className=\"header__location\">{props.location}</span>\n      <div className=\"header__time-container\">\n        <div className=\"header__time\">\n          <span className=\"header__dot brown\"></span>\n          <span className=\"header__dot tan\"></span>\n          <span className=\"header__dot gold\"></span>\n          <Spring\n            from={{ opacity: 0 }}\n            to={{ opacity: 1 }}\n            reset={props.animate}\n            config={{ duration: 2000 }} >\n            {styleProps => <span style={styleProps} className=\"header__time_value\">{props.time}</span>}\n          </Spring>\n          <span className=\"header__dot brown\"></span>\n          <span className=\"header__dot tan\"></span>\n          <span className=\"header__dot gold\"></span>\n        </div>\n      </div>\n    <Spring\n      from={{ opacity: 0 }}\n      to={{ opacity: 1 }}\n      reset={props.animate}\n      config={{ duration: 2000 }} >\n      {styleProps => <span style={styleProps} className=\"header__temperature\">{props.temperature || 'No Temp'}&deg;</span>}\n    </Spring>\n  </div>\n)\n\nHeader.propTypes = {\n  location: PropTypes.string,\n  time: PropTypes.string,\n  temperature: PropTypes.number\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ProgressBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: props.initialTime\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.startTimer) {\n      this.startTimer();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.startTimer !== prevProps.startTimer) {\n      if (this.props.startTimer) {\n        this.startTimer();\n      } else {\n        this.resetTimer();\n      }\n    }\n  }\n\n  startTimer = () => {\n    this.timerId = setInterval(() => {\n      if (this.state.timer === 0) {\n        this.resetTimer();\n        this.props.handleTimerFinished();\n      } else {\n        this.setState((prevState) => ({ timer: prevState.timer - 1 }));\n      }\n    }, 1000);\n  }\n\n  resetTimer = () => {\n    clearInterval(this.timerId);\n    this.setState(() => ({ timer: this.props.initialTime }));\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    const percentageWidth = 100 - ((this.state.timer / this.props.initialTime) * 100);\n\n    return (\n      <div className=\"progress-bar\">\n        <span className=\"progress-bar__text\">{`Reloading in ${this.state.timer}s`}</span>\n        <div className=\"progress-bar__container\">\n          <div className=\"progress-bar__filler\" style={{ width: `${percentageWidth}%`}}></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  startTimer: PropTypes.bool.isRequired,\n  initialTime: PropTypes.number.isRequired,\n  handleTimerFinished: PropTypes.func.isRequired\n}\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport DateUtils from '../utils/date';\n\nconst DailyForecast = (props) => (\n  <div style={props.style} className=\"daily-forecast\">\n    <div className=\"daily-forecast__day-container\">\n      <span className=\"daily-forecast__day\">{DateUtils.getDayOfWeek(props.day)}</span>\n      <span className=\"daily-forecast__temperature\">{Math.floor(props.temperature)}&deg;</span>\n    </div>\n    <div className=\"daily-forecast__forecast-container\">\n      <img className=\"daily-forecast__icon-code\" src={`http://openweathermap.org/img/wn/${props.iconCode}.png`} alt=\"weather forecast icon\" />\n      <span className=\"daily-forecast__forecast\">{props.forecast}</span>\n    </div>\n  </div>\n);\n\nDailyForecast.propTypes = {\n  day: PropTypes.number,\n  temperature: PropTypes.number,\n  iconCode: PropTypes.string,\n  forecast: PropTypes.string\n};\n\nexport default DailyForecast;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DailyForecast from './DailyForecast';\nimport { Transition } from 'react-spring/renderprops';\n\nconst FiveDayForecast = (props) => (\n  <div className=\"five-day-forecast\">\n    {props.data.length === 0 && \n      <div className=\"five-day-forecast__data-not-available\">No weather forecast data available.</div>}\n    {props.data.length > 0 &&\n      <Transition\n        items={props.data} \n        keys={item => item.dt}\n        from={{ opacity: 0 }}\n        enter={{ opacity: 1 }}\n        reset={props.animate}\n        config={{ duration: 500 }}\n        trail={200} >\n          {item => styleProp =>\n            <DailyForecast\n              style={styleProp}\n              day={item.dt}\n              temperature={item.main.temp}\n              iconCode={item.weather[0].icon}\n              forecast={item.weather[0].description} />}\n      </Transition>}\n  </div>\n);\n\nFiveDayForecast.propTypes = {\n  data: PropTypes.array.isRequired,\n  animate: PropTypes.bool.isRequired\n};\n\nexport default FiveDayForecast;","import React, { Component } from 'react';\nimport API from '../utils/api';\nimport DateUtils from '../utils/date';\nimport Header from './Header';\nimport ProgressBar from './ProgressBar';\nimport FiveDayForecast from './FiveDayForecast';\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport Colors from '../styles/base/_settings.scss';\n\nexport default class WeatherApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTime: undefined,\n      currentLocation: 'london',\n      currentTemperature: undefined,\n      startTimer: false,\n      forecastData: [],\n      animate: false,\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.getWeatherData();\n  }\n\n  getWeatherData = () => {\n    API.fetchCurrentWeather()\n    .then(res => {\n      const currentTemperature = res.data.main.temp;\n      API.fetchFiveDayForecast()\n      .then(res => {\n        const forecastData = this.filterForecastData(res.data.list);\n        this.setLatestFetchData(forecastData, currentTemperature);\n        this.saveWeatherDataToState(forecastData, currentTemperature);\n      })\n      .catch(err => {\n        console.log(err);\n      })\n    })\n    .catch(err => {\n      console.log(err);\n      try {\n        const { forecastData, currentTemperature } = this.getLatestFetchData();\n        this.saveWeatherDataToState(forecastData, currentTemperature);\n      } catch(e) {\n        console.log(e);\n      }\n    })\n  }\n\n  saveWeatherDataToState = (forecastData, currentTemperature) => {\n    this.setState(() => ({\n      currentTime: DateUtils.getCurrentTime(),\n      currentTemperature: Math.floor(currentTemperature),\n      startTimer: true,\n      forecastData,\n      animate: true,\n      loading: false\n    }));\n  }\n\n  // Use localStorage to store latest forecast data in case API call fails\n  setLatestFetchData = (forecastData, currentTemperature) => {\n    const forecastDataJSON = JSON.stringify(forecastData);\n    const currentTemperatureJSON = JSON.stringify(currentTemperature);\n    localStorage.setItem('forecastData', forecastDataJSON);\n    localStorage.setItem('currentTemperature', currentTemperatureJSON);\n  }\n\n  getLatestFetchData = () => {\n    const forecastData = JSON.parse(localStorage.getItem('forecastData')) || [];\n    const currentTemperature = JSON.parse(localStorage.getItem('currentTemperature')) || undefined;\n    return { forecastData, currentTemperature };\n  }\n\n  filterForecastData = (data) => {\n    const noonHour = 12;\n    const filteredData = data.filter((dataObject) => {\n      const forecastHour = new Date(dataObject.dt * 1000).getUTCHours();\n      return forecastHour === noonHour;\n    });\n\n    const firstDate = new Date(filteredData[0].dt * 1000).getUTCDate();\n    const todaysDate = new Date().getUTCDate();\n\n    // For early mornings between 00:00 -> 09:00, the 5th day 12:00 forecast is not covered by the 40 datapoints. Remove the first datapoint (current day) and append the latest 5th day forecast.\n    if ((firstDate === todaysDate) && (filteredData.length === 5)) {\n      filteredData.shift();\n      filteredData.push(data[data.length - 1]);\n    }\n\n    return filteredData;\n  }\n\n  handleTimerFinish = () => {\n    // Stop timer and reset forecast state\n    this.setState(() => ({\n      forecastData: [],\n      startTimer: false,\n      animate: false,\n      loading: true\n    }));\n\n    // Fetch new weather data\n    this.getWeatherData();\n  }\n\n  render() {\n    const { currentTime, currentLocation, currentTemperature, startTimer, forecastData, animate, loading } = this.state;\n\n    return (\n      <div className=\"weather-app\">\n        <Header \n          location={currentLocation}\n          time={currentTime}\n          temperature={currentTemperature}\n          animate={animate}\n        />\n        <ProgressBar\n          startTimer={startTimer}\n          initialTime={60}\n          handleTimerFinished={this.handleTimerFinish}\n        />\n        <div className=\"forecast-container\">\n          {loading && <div className=\"loader\">\n            <PulseLoader\n              size={20}\n              loading={loading}\n              color={Colors.tan}\n            />\n          </div>}\n          <FiveDayForecast \n            data={forecastData}\n            animate={animate}\n            loading={loading}\n          />\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport WeatherApp from './components/WeatherApp';\nimport './styles/styles.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <WeatherApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}